package tes.semarang.satelite;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class Satellite {
	int preIndex = 0;
	Tree tree;

	public Satellite() {
	}

	public Tree treeFromTraversals(List<Character> preorder, List<Character> inorder) {
		int len = inorder.size();
		if (0 > len - 1)
			return null;

		Node tNode = new Node(preorder.get(preIndex++));

		if (0 == len - 1) {
			tree = new Tree(tNode);
			return tree;
		}

		int inIndex = search(Arrays.asList(inorder), 0, len-1, tNode.value);

		tNode.left = buildTree(in, pre, inStrt, inIndex - 1);
		tNode.right = buildTree(in, pre, inIndex + 1, inEnd);

		return tNode;
	}

	int search(char arr[], int strt, int end, char value) {
		int i;
		for (i = strt; i <= end; i++) {
			if (arr[i] == value)
				return i;
		}
		return i;
	}
}
