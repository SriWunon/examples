package example.exercism;

public class InOrder {

	public static void main(String[] args) {

		// construct the binary tree given in question
		BinaryTree bt = new BinaryTree().create();
		// traversing binary tree using InOrder traversal using recursion
		System.out.println("printing nodes of binary tree on InOrder using recursion");
		bt.inOrder();
	}

	static class BinaryTree {
		class Node {
			String data;
			Node left, right;

			Node(String value) {
				this.data = value;
				left = right = null;
			}
		}

		// root of binary tree
		Node root;

		/**
		 * traverse the binary tree on InOrder traversal algorithm
		 */
		public void inOrder() {
			inOrder(root);
		}

		private void inOrder(Node node) {
			if (node == null) {
				return;
			}
			inOrder(node.left);
			System.out.printf("%s ", node.data);
			inOrder(node.right);
		}

		/**
		 * Java method to create binary tree with test data
		 *
		 * @return a sample binary tree for testing
		 */
		public BinaryTree create() {
			BinaryTree tree = new BinaryTree();
			Node root = new Node("40");
			tree.root = root;
			tree.root.left = new Node("20");
			tree.root.left.left = new Node("10");
			tree.root.left.left.left = new Node("5");
			tree.root.left.right = new Node("30");
			tree.root.right = new Node("50");
			tree.root.right.right = new Node("60");
			tree.root.left.right.left = new Node("67");
			tree.root.left.right.right = new Node("78");

			return tree;
		}
	}

}
